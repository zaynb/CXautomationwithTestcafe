"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const lodash_1 = require("lodash");
const test_run_1 = require("../../errors/test-run");
class RequestHook {
    constructor(requestFilterRules, responseEventConfigureOpts) {
        this.requestFilterRules = this._prepareRequestFilterRules(requestFilterRules);
        this._instantiatedRequestFilterRules = [];
        this._responseEventConfigureOpts = responseEventConfigureOpts;
        this.warningLog = null;
    }
    _prepareRequestFilterRules(rules) {
        if (rules)
            return lodash_1.castArray(rules);
        return [testcafe_hammerhead_1.RequestFilterRule.ANY];
    }
    _instantiateRequestFilterRules() {
        this._instantiatedRequestFilterRules = [];
        this.requestFilterRules.forEach(rule => {
            const instantiatedRule = rule instanceof testcafe_hammerhead_1.RequestFilterRule ? rule : new testcafe_hammerhead_1.RequestFilterRule(rule);
            this._instantiatedRequestFilterRules.push(instantiatedRule);
        });
    }
    async onRequest(event) {
        throw new test_run_1.RequestHookNotImplementedMethodError('onRequest', this.constructor.name);
    }
    _onConfigureResponse(event) {
        if (!this._responseEventConfigureOpts)
            return;
        event.opts.includeHeaders = this._responseEventConfigureOpts.includeHeaders;
        event.opts.includeBody = this._responseEventConfigureOpts.includeBody;
    }
    async onResponse(event) {
        throw new test_run_1.RequestHookNotImplementedMethodError('onResponse', this.constructor.name);
    }
}
exports.default = RequestHook;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVxdWVzdC1ob29rcy9ob29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkRBTTZCO0FBRTdCLG1DQUFtQztBQUNuQyxvREFBNkU7QUFLN0UsTUFBOEIsV0FBVztJQU1yQyxZQUF1QixrQkFBK0UsRUFBRSwwQkFBMEQ7UUFDOUosSUFBSSxDQUFDLGtCQUFrQixHQUFnQixJQUFJLENBQUMsMEJBQTBCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMzRixJQUFJLENBQUMsK0JBQStCLEdBQUcsRUFBRSxDQUFDO1FBQzFDLElBQUksQ0FBQywyQkFBMkIsR0FBTywwQkFBMEIsQ0FBQztRQUVsRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztJQUMzQixDQUFDO0lBRU8sMEJBQTBCLENBQUUsS0FBa0U7UUFDbEcsSUFBSSxLQUFLO1lBQ0wsT0FBTyxrQkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTVCLE9BQU8sQ0FBQyx1Q0FBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU8sOEJBQThCO1FBQ2xDLElBQUksQ0FBQywrQkFBK0IsR0FBRyxFQUFFLENBQUM7UUFFMUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQyxNQUFNLGdCQUFnQixHQUFHLElBQUksWUFBWSx1Q0FBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLHVDQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWhHLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFUyxLQUFLLENBQUMsU0FBUyxDQUFFLEtBQW1CO1FBQzFDLE1BQU0sSUFBSSwrQ0FBb0MsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRU8sb0JBQW9CLENBQUUsS0FBNkI7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQywyQkFBMkI7WUFDakMsT0FBTztRQUVYLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxjQUFjLENBQUM7UUFDNUUsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQU0sSUFBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsQ0FBQztJQUM3RSxDQUFDO0lBRVMsS0FBSyxDQUFDLFVBQVUsQ0FBRSxLQUFvQjtRQUM1QyxNQUFNLElBQUksK0NBQW9DLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEYsQ0FBQztDQUNKO0FBOUNELDhCQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgUmVxdWVzdEZpbHRlclJ1bGUsXG4gICAgQ29uZmlndXJlUmVzcG9uc2VFdmVudCxcbiAgICBDb25maWd1cmVSZXNwb25zZUV2ZW50T3B0aW9ucyxcbiAgICBSZXF1ZXN0RXZlbnQsXG4gICAgUmVzcG9uc2VFdmVudFxufSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcblxuaW1wb3J0IHsgY2FzdEFycmF5IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFJlcXVlc3RIb29rTm90SW1wbGVtZW50ZWRNZXRob2RFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9ycy90ZXN0LXJ1bic7XG5pbXBvcnQgeyBSZXF1ZXN0RmlsdGVyUnVsZUluaXQgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IFdhcm5pbmdMb2cgZnJvbSAnLi4vLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLWxvZyc7XG5cblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgUmVxdWVzdEhvb2sge1xuICAgIHByb3RlY3RlZCByZXF1ZXN0RmlsdGVyUnVsZXM6IFJlcXVlc3RGaWx0ZXJSdWxlSW5pdFtdO1xuICAgIHByaXZhdGUgX2luc3RhbnRpYXRlZFJlcXVlc3RGaWx0ZXJSdWxlczogUmVxdWVzdEZpbHRlclJ1bGVbXTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cz86IENvbmZpZ3VyZVJlc3BvbnNlRXZlbnRPcHRpb25zO1xuICAgIHByb3RlY3RlZCB3YXJuaW5nTG9nOiBXYXJuaW5nTG9nIHwgbnVsbDtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvciAocmVxdWVzdEZpbHRlclJ1bGVzOiBSZXF1ZXN0RmlsdGVyUnVsZUluaXQgfCBSZXF1ZXN0RmlsdGVyUnVsZUluaXRbXSB8IHVuZGVmaW5lZCwgcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHM/OiBDb25maWd1cmVSZXNwb25zZUV2ZW50T3B0aW9ucykge1xuICAgICAgICB0aGlzLnJlcXVlc3RGaWx0ZXJSdWxlcyAgICAgICAgICAgICAgPSB0aGlzLl9wcmVwYXJlUmVxdWVzdEZpbHRlclJ1bGVzKHJlcXVlc3RGaWx0ZXJSdWxlcyk7XG4gICAgICAgIHRoaXMuX2luc3RhbnRpYXRlZFJlcXVlc3RGaWx0ZXJSdWxlcyA9IFtdO1xuICAgICAgICB0aGlzLl9yZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cyAgICAgPSByZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cztcblxuICAgICAgICB0aGlzLndhcm5pbmdMb2cgPSBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3ByZXBhcmVSZXF1ZXN0RmlsdGVyUnVsZXMgKHJ1bGVzOiBSZXF1ZXN0RmlsdGVyUnVsZUluaXQgfCBSZXF1ZXN0RmlsdGVyUnVsZUluaXRbXSB8IHVuZGVmaW5lZCk6IFJlcXVlc3RGaWx0ZXJSdWxlSW5pdFtdIHtcbiAgICAgICAgaWYgKHJ1bGVzKVxuICAgICAgICAgICAgcmV0dXJuIGNhc3RBcnJheShydWxlcyk7XG5cbiAgICAgICAgcmV0dXJuIFtSZXF1ZXN0RmlsdGVyUnVsZS5BTlldO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2luc3RhbnRpYXRlUmVxdWVzdEZpbHRlclJ1bGVzICgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5faW5zdGFudGlhdGVkUmVxdWVzdEZpbHRlclJ1bGVzID0gW107XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0RmlsdGVyUnVsZXMuZm9yRWFjaChydWxlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbnRpYXRlZFJ1bGUgPSBydWxlIGluc3RhbmNlb2YgUmVxdWVzdEZpbHRlclJ1bGUgPyBydWxlIDogbmV3IFJlcXVlc3RGaWx0ZXJSdWxlKHJ1bGUpO1xuXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW50aWF0ZWRSZXF1ZXN0RmlsdGVyUnVsZXMucHVzaChpbnN0YW50aWF0ZWRSdWxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uUmVxdWVzdCAoZXZlbnQ6IFJlcXVlc3RFdmVudCk6IFByb21pc2U8dm9pZD4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgICB0aHJvdyBuZXcgUmVxdWVzdEhvb2tOb3RJbXBsZW1lbnRlZE1ldGhvZEVycm9yKCdvblJlcXVlc3QnLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX29uQ29uZmlndXJlUmVzcG9uc2UgKGV2ZW50OiBDb25maWd1cmVSZXNwb25zZUV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5fcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgZXZlbnQub3B0cy5pbmNsdWRlSGVhZGVycyA9IHRoaXMuX3Jlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzLmluY2x1ZGVIZWFkZXJzO1xuICAgICAgICBldmVudC5vcHRzLmluY2x1ZGVCb2R5ICAgID0gdGhpcy5fcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMuaW5jbHVkZUJvZHk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIG9uUmVzcG9uc2UgKGV2ZW50OiBSZXNwb25zZUV2ZW50KTogUHJvbWlzZTx2b2lkPiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgIHRocm93IG5ldyBSZXF1ZXN0SG9va05vdEltcGxlbWVudGVkTWV0aG9kRXJyb3IoJ29uUmVzcG9uc2UnLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgIH1cbn1cbiJdfQ==