"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resizeWindow = exports.updateMobileViewportSize = exports.closeTab = exports.isHeadlessTab = exports.createClient = exports.getScreenshotData = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const chrome_remote_interface_1 = __importDefault(require("chrome-remote-interface"));
const client_functions_1 = require("../../../utils/client-functions");
const DOWNLOADS_DIR = path_1.default.join(os_1.default.homedir(), 'Downloads');
async function getActiveTab(cdpPort, browserId) {
    const tabs = await chrome_remote_interface_1.default.listTabs({ port: cdpPort });
    return tabs.filter(t => t.type === 'page' && t.url.includes(browserId))[0];
}
async function setEmulationBounds({ client, config, viewportSize, emulatedDevicePixelRatio }) {
    await setDeviceMetricsOverride(client, viewportSize.width, viewportSize.height, emulatedDevicePixelRatio, config.mobile);
    await client.Emulation.setVisibleSize({ width: viewportSize.width, height: viewportSize.height });
}
async function setUserAgentEmulation(runtimeInfo) {
    const { client, config } = runtimeInfo;
    if (config.userAgent === void 0)
        return;
    await client.Network.setUserAgentOverride({ userAgent: config.userAgent });
}
async function setTouchEmulation(runtimeInfo) {
    const { client, config } = runtimeInfo;
    if (config.touch === void 0)
        return;
    const touchConfig = {
        enabled: config.touch,
        configuration: config.mobile ? 'mobile' : 'desktop',
        maxTouchPoints: 1
    };
    if (client.Emulation.setEmitTouchEventsForMouse)
        await client.Emulation.setEmitTouchEventsForMouse(touchConfig);
    if (client.Emulation.setTouchEmulationEnabled)
        await client.Emulation.setTouchEmulationEnabled(touchConfig);
}
async function setEmulation(runtimeInfo) {
    await setUserAgentEmulation(runtimeInfo);
    await setTouchEmulation(runtimeInfo);
    await resizeWindow({
        width: runtimeInfo.config.width,
        height: runtimeInfo.config.height
    }, runtimeInfo);
}
async function enableDownloads({ client }) {
    await client.Page.setDownloadBehavior({
        behavior: 'allow',
        downloadPath: DOWNLOADS_DIR
    });
}
async function calculateEmulatedDevicePixelRatio(runtimeInfo) {
    const { client, config } = runtimeInfo;
    const devicePixelRatioQueryResult = await client.Runtime.evaluate({ expression: 'window.devicePixelRatio' });
    runtimeInfo.originalDevicePixelRatio = devicePixelRatioQueryResult.result.value;
    runtimeInfo.emulatedDevicePixelRatio = config.scaleFactor || runtimeInfo.originalDevicePixelRatio;
}
async function getScreenshotData({ client, config, emulatedDevicePixelRatio }, fullPage) {
    let viewportWidth = 0;
    let viewportHeight = 0;
    if (fullPage) {
        const { contentSize, visualViewport } = await client.Page.getLayoutMetrics();
        await setDeviceMetricsOverride(client, Math.ceil(contentSize.width), Math.ceil(contentSize.height), emulatedDevicePixelRatio, config.mobile);
        viewportWidth = visualViewport.clientWidth;
        viewportHeight = visualViewport.clientHeight;
    }
    const screenshotData = await client.Page.captureScreenshot({});
    if (fullPage) {
        if (config.emulation) {
            await setDeviceMetricsOverride(client, config.width || viewportWidth, config.height || viewportHeight, emulatedDevicePixelRatio, config.mobile);
        }
        else
            await client.Emulation.clearDeviceMetricsOverride();
    }
    return Buffer.from(screenshotData.data, 'base64');
}
exports.getScreenshotData = getScreenshotData;
async function setDeviceMetricsOverride(client, width, height, deviceScaleFactor, mobile) {
    await client.Emulation.setDeviceMetricsOverride({
        width,
        height,
        deviceScaleFactor,
        mobile,
        // @ts-ignore
        fitWindow: false
    });
}
async function createClient(runtimeInfo) {
    const { browserId, config, cdpPort } = runtimeInfo;
    let tab = null;
    let client = null;
    try {
        tab = await getActiveTab(cdpPort, browserId);
        if (!tab)
            return;
        client = await chrome_remote_interface_1.default({ target: tab, port: cdpPort });
    }
    catch (e) {
        return;
    }
    runtimeInfo.tab = tab;
    runtimeInfo.client = client;
    await client.Page.enable();
    await client.Network.enable({});
    await client.Runtime.enable();
    await calculateEmulatedDevicePixelRatio(runtimeInfo);
    if (config.emulation)
        await setEmulation(runtimeInfo);
    if (config.headless)
        await enableDownloads(runtimeInfo);
}
exports.createClient = createClient;
function isHeadlessTab({ tab, config }) {
    return tab && config.headless;
}
exports.isHeadlessTab = isHeadlessTab;
async function closeTab({ tab, cdpPort }) {
    await chrome_remote_interface_1.default.closeTab({ id: tab.id, port: cdpPort });
}
exports.closeTab = closeTab;
async function updateMobileViewportSize(runtimeInfo) {
    const windowDimensionsQueryResult = await runtimeInfo.client.Runtime.evaluate({
        expression: `(${client_functions_1.GET_WINDOW_DIMENSIONS_INFO_SCRIPT})()`,
        returnByValue: true
    });
    const windowDimensions = windowDimensionsQueryResult.result.value;
    runtimeInfo.viewportSize.width = windowDimensions.outerWidth;
    runtimeInfo.viewportSize.height = windowDimensions.outerHeight;
}
exports.updateMobileViewportSize = updateMobileViewportSize;
async function resizeWindow(newDimensions, runtimeInfo) {
    const { browserId, config, viewportSize, providerMethods } = runtimeInfo;
    const currentWidth = viewportSize.width;
    const currentHeight = viewportSize.height;
    const newWidth = newDimensions.width || currentWidth;
    const newHeight = newDimensions.height || currentHeight;
    if (!config.headless)
        await providerMethods.resizeLocalBrowserWindow(browserId, newWidth, newHeight, currentWidth, currentHeight);
    viewportSize.width = newWidth;
    viewportSize.height = newHeight;
    if (config.emulation)
        await setEmulationBounds(runtimeInfo);
}
exports.resizeWindow = resizeWindow;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvcHJvdmlkZXIvYnVpbHQtaW4vZGVkaWNhdGVkL2Nocm9tZS9jZHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLDRDQUFvQjtBQUNwQixzRkFBbUQ7QUFDbkQsc0VBQW9GO0FBeUNwRixNQUFNLGFBQWEsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLFlBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUUzRCxLQUFLLFVBQVUsWUFBWSxDQUFFLE9BQWUsRUFBRSxTQUFpQjtJQUMzRCxNQUFNLElBQUksR0FBRyxNQUFNLGlDQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFNUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxNQUFNLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvRSxDQUFDO0FBRUQsS0FBSyxVQUFVLGtCQUFrQixDQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsd0JBQXdCLEVBQWU7SUFDdEcsTUFBTSx3QkFBd0IsQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsTUFBTSxFQUFFLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV6SCxNQUFNLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3RHLENBQUM7QUFFRCxLQUFLLFVBQVUs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Q0FBQyxDQUFDO0FBQzlDLENBQUM7QUFoQkQsb0NBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHJlbW90ZUNocm9tZSBmcm9tICdjaHJvbWUtcmVtb3RlLWludGVyZmFjZSc7XG5pbXBvcnQgeyBHRVRfV0lORE9XX0RJTUVOU0lPTlNfSU5GT19TQ1JJUFQgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jbGllbnQtZnVuY3Rpb25zJztcblxuaW50ZXJmYWNlIFNpemUge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBDb25maWcge1xuICAgIGRldmljZU5hbWU/OiBzdHJpbmc7XG4gICAgaGVhZGxlc3M6IGJvb2xlYW47XG4gICAgbW9iaWxlOiBib29sZWFuO1xuICAgIGVtdWxhdGlvbjogZmFsc2U7XG4gICAgdXNlckFnZW50Pzogc3RyaW5nO1xuICAgIHRvdWNoPzogYm9vbGVhbjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHNjYWxlRmFjdG9yOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBQcm92aWRlck1ldGhvZHMge1xuICAgIHJlc2l6ZUxvY2FsQnJvd3NlcldpbmRvdyAoYnJvd3NlcklkOiBzdHJpbmcsIG5ld1dpZHRoOiBudW1iZXIsIG5ld0hlaWdodDogbnVtYmVyLCBjdXJyZW50V2lkdGg6IG51bWJlciwgY3VycmVudEhlaWdodDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuaW50ZXJmYWNlIFJ1bnRpbWVJbmZvIHtcbiAgICBicm93c2VySWQ6IHN0cmluZztcbiAgICBjZHBQb3J0OiBudW1iZXI7XG4gICAgY2xpZW50OiByZW1vdGVDaHJvbWUuUHJvdG9jb2xBcGk7XG4gICAgdGFiOiByZW1vdGVDaHJvbWUuVGFyZ2V0SW5mbztcbiAgICBjb25maWc6IENvbmZpZztcbiAgICB2aWV3cG9ydFNpemU6IFNpemU7XG4gICAgZW11bGF0ZWREZXZpY2VQaXhlbFJhdGlvOiBudW1iZXI7XG4gICAgb3JpZ2luYWxEZXZpY2VQaXhlbFJhdGlvOiBudW1iZXI7XG4gICAgcHJvdmlkZXJNZXRob2RzOiBQcm92aWRlck1ldGhvZHM7XG59XG5cbmludGVyZmFjZSBUb3VjaENvbmZpZ09wdGlvbnMge1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgY29uZmlndXJhdGlvbjogJ2Rlc2t0b3AnIHwgJ21vYmlsZSc7XG4gICAgbWF4VG91Y2hQb2ludHM6IG51bWJlcjtcbn1cblxuY29uc3QgRE9XTkxPQURTX0RJUiA9IHBhdGguam9pbihvcy5ob21lZGlyKCksICdEb3dubG9hZHMnKTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0QWN0aXZlVGFiIChjZHBQb3J0OiBudW1iZXIsIGJyb3dzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxyZW1vdGVDaHJvbWUuVGFyZ2V0SW5mbz4ge1xuICAgIGNvbnN0IHRhYnMgPSBhd2FpdCByZW1vdGVDaHJvbWUubGlzdFRhYnMoeyBwb3J0OiBjZHBQb3J0IH0pO1xuXG4gICAgcmV0dXJuIHRhYnMuZmlsdGVyKHQgPT4gdC50eXBlID09PSAncGFnZScgJiYgdC51cmwuaW5jbHVkZXMoYnJvd3NlcklkKSlbMF07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldEVtdWxhdGlvbkJvdW5kcyAoeyBjbGllbnQsIGNvbmZpZywgdmlld3BvcnRTaXplLCBlbXVsYXRlZERldmljZVBpeGVsUmF0aW8gfTogUnVudGltZUluZm8pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCBzZXREZXZpY2VNZXRyaWNzT3ZlcnJpZGUoY2xpZW50LCB2aWV3cG9ydFNpemUud2lkdGgsIHZpZXdwb3J0U2l6ZS5oZWlnaHQsIGVtdWxhdGVkRGV2aWNlUGl4ZWxSYXRpbywgY29uZmlnLm1vYmlsZSk7XG5cbiAgICBhd2FpdCBjbGllbnQuRW11bGF0aW9uLnNldFZpc2libGVTaXplKHsgd2lkdGg6IHZpZXdwb3J0U2l6ZS53aWR0aCwgaGVpZ2h0OiB2aWV3cG9ydFNpemUuaGVpZ2h0IH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRVc2VyQWdlbnRFbXVsYXRpb24gKHJ1bnRpbWVJbmZvOiBSdW50aW1lSW5mbyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHsgY2xpZW50LCBjb25maWcgfSA9IHJ1bnRpbWVJbmZvO1xuXG4gICAgaWYgKGNvbmZpZy51c2VyQWdlbnQgPT09IHZvaWQgMClcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgYXdhaXQgY2xpZW50Lk5ldHdvcmsuc2V0VXNlckFnZW50T3ZlcnJpZGUoeyB1c2VyQWdlbnQ6IGNvbmZpZy51c2VyQWdlbnQgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldFRvdWNoRW11bGF0aW9uIChydW50aW1lSW5mbzogUnVudGltZUluZm8pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7IGNsaWVudCwgY29uZmlnIH0gPSBydW50aW1lSW5mbztcblxuICAgIGlmIChjb25maWcudG91Y2ggPT09IHZvaWQgMClcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgY29uc3QgdG91Y2hDb25maWc6IFRvdWNoQ29uZmlnT3B0aW9ucyA9IHtcbiAgICAgICAgZW5hYmxlZDogICAgICAgIGNvbmZpZy50b3VjaCxcbiAgICAgICAgY29uZmlndXJhdGlvbjogIGNvbmZpZy5tb2JpbGUgPyAnbW9iaWxlJyA6ICdkZXNrdG9wJyxcbiAgICAgICAgbWF4VG91Y2hQb2ludHM6IDFcbiAgICB9O1xuXG4gICAgaWYgKGNsaWVudC5FbXVsYXRpb24uc2V0RW1pdFRvdWNoRXZlbnRzRm9yTW91c2UpXG4gICAgICAgIGF3YWl0IGNsaWVudC5FbXVsYXRpb24uc2V0RW1pdFRvdWNoRXZlbnRzRm9yTW91c2UodG91Y2hDb25maWcpO1xuXG4gICAgaWYgKGNsaWVudC5FbXVsYXRpb24uc2V0VG91Y2hFbXVsYXRpb25FbmFibGVkKVxuICAgICAgICBhd2FpdCBjbGllbnQuRW11bGF0aW9uLnNldFRvdWNoRW11bGF0aW9uRW5hYmxlZCh0b3VjaENvbmZpZyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldEVtdWxhdGlvbiAocnVudGltZUluZm86IFJ1bnRpbWVJbmZvKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgc2V0VXNlckFnZW50RW11bGF0aW9uKHJ1bnRpbWVJbmZvKTtcbiAgICBhd2FpdCBzZXRUb3VjaEVtdWxhdGlvbihydW50aW1lSW5mbyk7XG4gICAgYXdhaXQgcmVzaXplV2luZG93KHtcbiAgICAgICAgd2lkdGg6ICBydW50aW1lSW5mby5jb25maWcud2lkdGgsXG4gICAgICAgIGhlaWdodDogcnVudGltZUluZm8uY29uZmlnLmhlaWdodFxuICAgIH0sIHJ1bnRpbWVJbmZvKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZW5hYmxlRG93bmxvYWRzICh7IGNsaWVudCB9OiBSdW50aW1lSW5mbyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGNsaWVudC5QYWdlLnNldERvd25sb2FkQmVoYXZpb3Ioe1xuICAgICAgICBiZWhhdmlvcjogICAgICdhbGxvdycsXG4gICAgICAgIGRvd25sb2FkUGF0aDogRE9XTkxPQURTX0RJUlxuICAgIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjYWxjdWxhdGVFbXVsYXRlZERldmljZVBpeGVsUmF0aW8gKHJ1bnRpbWVJbmZvOiBSdW50aW1lSW5mbyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHsgY2xpZW50LCBjb25maWcgfSAgICAgICAgICA9IHJ1bnRpbWVJbmZvO1xuICAgIGNvbnN0IGRldmljZVBpeGVsUmF0aW9RdWVyeVJlc3VsdCA9IGF3YWl0IGNsaWVudC5SdW50aW1lLmV2YWx1YXRlKHsgZXhwcmVzc2lvbjogJ3dpbmRvdy5kZXZpY2VQaXhlbFJhdGlvJyB9KTtcblxuICAgIHJ1bnRpbWVJbmZvLm9yaWdpbmFsRGV2aWNlUGl4ZWxSYXRpbyA9IGRldmljZVBpeGVsUmF0aW9RdWVyeVJlc3VsdC5yZXN1bHQudmFsdWU7XG4gICAgcnVudGltZUluZm8uZW11bGF0ZWREZXZpY2VQaXhlbFJhdGlvID0gY29uZmlnLnNjYWxlRmFjdG9yIHx8IHJ1bnRpbWVJbmZvLm9yaWdpbmFsRGV2aWNlUGl4ZWxSYXRpbztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNjcmVlbnNob3REYXRhICh7IGNsaWVudCwgY29uZmlnLCBlbXVsYXRlZERldmljZVBpeGVsUmF0aW8gfTogUnVudGltZUluZm8sIGZ1bGxQYWdlPzogYm9vbGVhbik6IFByb21pc2U8QnVmZmVyPiB7XG4gICAgbGV0IHZpZXdwb3J0V2lkdGggPSAwO1xuICAgIGxldCB2aWV3cG9ydEhlaWdodCA9IDA7XG5cbiAgICBpZiAoZnVsbFBhZ2UpIHtcbiAgICAgICAgY29uc3QgeyBjb250ZW50U2l6ZSwgdmlzdWFsVmlld3BvcnQgfSA9IGF3YWl0IGNsaWVudC5QYWdlLmdldExheW91dE1ldHJpY3MoKTtcblxuICAgICAgICBhd2FpdCBzZXREZXZpY2VNZXRyaWNzT3ZlcnJpZGUoXG4gICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICBNYXRoLmNlaWwoY29udGVudFNpemUud2lkdGgpLFxuICAgICAgICAgICAgTWF0aC5jZWlsKGNvbnRlbnRTaXplLmhlaWdodCksXG4gICAgICAgICAgICBlbXVsYXRlZERldmljZVBpeGVsUmF0aW8sXG4gICAgICAgICAgICBjb25maWcubW9iaWxlKTtcblxuICAgICAgICB2aWV3cG9ydFdpZHRoID0gdmlzdWFsVmlld3BvcnQuY2xpZW50V2lkdGg7XG4gICAgICAgIHZpZXdwb3J0SGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuY2xpZW50SGVpZ2h0O1xuICAgIH1cblxuICAgIGNvbnN0IHNjcmVlbnNob3REYXRhID0gYXdhaXQgY2xpZW50LlBhZ2UuY2FwdHVyZVNjcmVlbnNob3Qoe30pO1xuXG4gICAgaWYgKGZ1bGxQYWdlKSB7XG4gICAgICAgIGlmIChjb25maWcuZW11bGF0aW9uKSB7XG4gICAgICAgICAgICBhd2FpdCBzZXREZXZpY2VNZXRyaWNzT3ZlcnJpZGUoXG4gICAgICAgICAgICAgICAgY2xpZW50LFxuICAgICAgICAgICAgICAgIGNvbmZpZy53aWR0aCB8fCB2aWV3cG9ydFdpZHRoLFxuICAgICAgICAgICAgICAgIGNvbmZpZy5oZWlnaHQgfHwgdmlld3BvcnRIZWlnaHQsXG4gICAgICAgICAgICAgICAgZW11bGF0ZWREZXZpY2VQaXhlbFJhdGlvLFxuICAgICAgICAgICAgICAgIGNvbmZpZy5tb2JpbGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGF3YWl0IGNsaWVudC5FbXVsYXRpb24uY2xlYXJEZXZpY2VNZXRyaWNzT3ZlcnJpZGUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc2NyZWVuc2hvdERhdGEuZGF0YSwgJ2Jhc2U2NCcpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXREZXZpY2VNZXRyaWNzT3ZlcnJpZGUgKGNsaWVudDogcmVtb3RlQ2hyb21lLlByb3RvY29sQXBpLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZGV2aWNlU2NhbGVGYWN0b3I6IG51bWJlciwgbW9iaWxlOiBib29sZWFuKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgY2xpZW50LkVtdWxhdGlvbi5zZXREZXZpY2VNZXRyaWNzT3ZlcnJpZGUoe1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICBkZXZpY2VTY2FsZUZhY3RvcixcbiAgICAgICAgbW9iaWxlLFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGZpdFdpbmRvdzogZmFsc2VcbiAgICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNsaWVudCAocnVudGltZUluZm86IFJ1bnRpbWVJbmZvKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyBicm93c2VySWQsIGNvbmZpZywgY2RwUG9ydCB9ID0gcnVudGltZUluZm87XG5cbiAgICBsZXQgdGFiICAgID0gbnVsbDtcbiAgICBsZXQgY2xpZW50ID0gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICAgIHRhYiA9IGF3YWl0IGdldEFjdGl2ZVRhYihjZHBQb3J0LCBicm93c2VySWQpO1xuXG4gICAgICAgIGlmICghdGFiKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNsaWVudCA9IGF3YWl0IHJlbW90ZUNocm9tZSh7IHRhcmdldDogdGFiLCBwb3J0OiBjZHBQb3J0IH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcnVudGltZUluZm8udGFiICAgID0gdGFiO1xuICAgIHJ1bnRpbWVJbmZvLmNsaWVudCA9IGNsaWVudDtcblxuICAgIGF3YWl0IGNsaWVudC5QYWdlLmVuYWJsZSgpO1xuICAgIGF3YWl0IGNsaWVudC5OZXR3b3JrLmVuYWJsZSh7fSk7XG4gICAgYXdhaXQgY2xpZW50LlJ1bnRpbWUuZW5hYmxlKCk7XG5cbiAgICBhd2FpdCBjYWxjdWxhdGVFbXVsYXRlZERldmljZVBpeGVsUmF0aW8ocnVudGltZUluZm8pO1xuXG4gICAgaWYgKGNvbmZpZy5lbXVsYXRpb24pXG4gICAgICAgIGF3YWl0IHNldEVtdWxhdGlvbihydW50aW1lSW5mbyk7XG5cbiAgICBpZiAoY29uZmlnLmhlYWRsZXNzKVxuICAgICAgICBhd2FpdCBlbmFibGVEb3dubG9hZHMocnVudGltZUluZm8pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNIZWFkbGVzc1RhYiAoeyB0YWIsIGNvbmZpZyB9OiBSdW50aW1lSW5mbyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0YWIgJiYgY29uZmlnLmhlYWRsZXNzO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xvc2VUYWIgKHsgdGFiLCBjZHBQb3J0IH06IFJ1bnRpbWVJbmZvKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgcmVtb3RlQ2hyb21lLmNsb3NlVGFiKHsgaWQ6IHRhYi5pZCwgcG9ydDogY2RwUG9ydCB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZU1vYmlsZVZpZXdwb3J0U2l6ZSAocnVudGltZUluZm86IFJ1bnRpbWVJbmZvKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgd2luZG93RGltZW5zaW9uc1F1ZXJ5UmVzdWx0ID0gYXdhaXQgcnVudGltZUluZm8uY2xpZW50LlJ1bnRpbWUuZXZhbHVhdGUoe1xuICAgICAgICBleHByZXNzaW9uOiAgICBgKCR7R0VUX1dJTkRPV19ESU1FTlNJT05TX0lORk9fU0NSSVBUfSkoKWAsXG4gICAgICAgIHJldHVybkJ5VmFsdWU6IHRydWVcbiAgICB9KTtcblxuICAgIGNvbnN0IHdpbmRvd0RpbWVuc2lvbnMgPSB3aW5kb3dEaW1lbnNpb25zUXVlcnlSZXN1bHQucmVzdWx0LnZhbHVlO1xuXG4gICAgcnVudGltZUluZm8udmlld3BvcnRTaXplLndpZHRoICA9IHdpbmRvd0RpbWVuc2lvbnMub3V0ZXJXaWR0aDtcbiAgICBydW50aW1lSW5mby52aWV3cG9ydFNpemUuaGVpZ2h0ID0gd2luZG93RGltZW5zaW9ucy5vdXRlckhlaWdodDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc2l6ZVdpbmRvdyAobmV3RGltZW5zaW9uczogU2l6ZSwgcnVudGltZUluZm86IFJ1bnRpbWVJbmZvKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgeyBicm93c2VySWQsIGNvbmZpZywgdmlld3BvcnRTaXplLCBwcm92aWRlck1ldGhvZHMgfSA9IHJ1bnRpbWVJbmZvO1xuXG4gICAgY29uc3QgY3VycmVudFdpZHRoICA9IHZpZXdwb3J0U2l6ZS53aWR0aDtcbiAgICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gdmlld3BvcnRTaXplLmhlaWdodDtcbiAgICBjb25zdCBuZXdXaWR0aCAgICAgID0gbmV3RGltZW5zaW9ucy53aWR0aCB8fCBjdXJyZW50V2lkdGg7XG4gICAgY29uc3QgbmV3SGVpZ2h0ICAgICA9IG5ld0RpbWVuc2lvbnMuaGVpZ2h0IHx8IGN1cnJlbnRIZWlnaHQ7XG5cbiAgICBpZiAoIWNvbmZpZy5oZWFkbGVzcylcbiAgICAgICAgYXdhaXQgcHJvdmlkZXJNZXRob2RzLnJlc2l6ZUxvY2FsQnJvd3NlcldpbmRvdyhicm93c2VySWQsIG5ld1dpZHRoLCBuZXdIZWlnaHQsIGN1cnJlbnRXaWR0aCwgY3VycmVudEhlaWdodCk7XG5cbiAgICB2aWV3cG9ydFNpemUud2lkdGggID0gbmV3V2lkdGg7XG4gICAgdmlld3BvcnRTaXplLmhlaWdodCA9IG5ld0hlaWdodDtcblxuICAgIGlmIChjb25maWcuZW11bGF0aW9uKVxuICAgICAgICBhd2FpdCBzZXRFbXVsYXRpb25Cb3VuZHMocnVudGltZUluZm8pO1xufVxuIl19