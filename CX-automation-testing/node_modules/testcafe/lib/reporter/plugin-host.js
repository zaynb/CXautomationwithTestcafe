"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const indent_string_1 = __importDefault(require("indent-string"));
const lodash_1 = require("lodash");
const moment_loader_1 = __importDefault(require("../utils/moment-loader"));
const os_family_1 = __importDefault(require("os-family"));
const string_1 = require("../utils/string");
const get_viewport_width_1 = __importDefault(require("../utils/get-viewport-width"));
const colors_1 = require("../utils/diff/colors");
// NOTE: we should not expose internal state to
// the plugin, to avoid accidental rewrites.
// Therefore we use symbols to store them.
/*global Symbol*/
const stream = Symbol();
const wordWrapEnabled = Symbol();
const indent = Symbol();
const errorDecorator = Symbol();
class ReporterPluginHost {
    constructor(plugin, outStream, name) {
        this.name = name;
        this.streamController = null;
        this[stream] = outStream || process.stdout;
        this[wordWrapEnabled] = false;
        this[indent] = 0;
        const useColors = this[stream] === process.stdout && chalk_1.default.enabled && !plugin.noColors;
        this.chalk = new chalk_1.default.constructor({ enabled: useColors });
        this.moment = moment_loader_1.default;
        this.viewportWidth = get_viewport_width_1.default(this[stream]);
        this.symbols = os_family_1.default.win ?
            { ok: '√', err: '×' } :
            { ok: '✓', err: '✖' };
        lodash_1.assignIn(this, plugin);
        this[errorDecorator] = this.createErrorDecorator();
    }
    // Error decorator
    createErrorDecorator() {
        return {
            'span user-agent': str => this.chalk.grey(str),
            'span subtitle': str => `- ${this.chalk.bold.red(str)} -`,
            'div message': str => this.chalk.bold.red(str),
            'div screenshot-info': lodash_1.identity,
            'a screenshot-path': str => this.chalk.grey.underline(str),
            'code': lodash_1.identity,
            'span syntax-string': str => this.chalk.green(str),
            'span syntax-punctuator': str => this.chalk.grey(str),
            'span syntax-keyword': str => this.chalk.cyan(str),
            'span syntax-number': str => this.chalk.magenta(str),
            'span syntax-regex': str => this.chalk.magenta(str),
            'span syntax-comment': str => this.chalk.grey.bold(str),
            'span syntax-invalid': str => this.chalk.inverse(str),
            [`span ${colors_1.DIFF_COLORS.DIFF_NOT_MODIFIED}`]: str => this.chalk.gray(str),
            [`span ${colors_1.DIFF_COLORS.DIFF_ADDED}`]: str => this.chalk.green(str),
            [`span ${colors_1.DIFF_COLORS.DIFF_REMOVED}`]: str => this.chalk.red(str),
            'div code-frame': lodash_1.identity,
            'div code-line': str => str + '\n',
            'div code-line-last': lodash_1.identity,
            'div code-line-num': str => `   ${str} |`,
            'div code-line-num-base': str => this.chalk.bgRed(` > ${str} `) + '|',
            'div code-line-src': lodash_1.identity,
            'div stack': str => '\n\n' + str,
            'div stack-line': str => str + '\n',
            'div stack-line-last': lodash_1.identity,
            'div stack-line-name': str => `   at ${this.chalk.bold(str)}`,
            'div stack-line-location': str => ` (${this.chalk.grey.underline(str)})`,
            'strong': str => this.chalk.bold(str),
            'a': str => `"${this.chalk.underline(str)}"`
        };
    }
    // String helpers
    indentString(str, indentVal) {
        return indent_string_1.default(str, ' ', indentVal);
    }
    wordWrap(str, indentVal, width) {
        return string_1.wordWrap(str, indentVal, width);
    }
    escapeHtml(str) {
        return lodash_1.escape(str);
    }
    formatError(err, prefix = '') {
        const prefixLengthWithoutColors = string_1.removeTTYColors(prefix).length;
        const maxMsgLength = this.viewportWidth - this[indent] - prefixLengthWithoutColors;
        let msg = err.formatMessage(this[errorDecorator], maxMsgLength);
        if (this[wordWrapEnabled])
            msg = this.wordWrap(msg, prefixLengthWithoutColors, maxMsgLength);
        else
            msg = this.indentString(msg, prefixLengthWithoutColors);
        return prefix + msg.substr(prefixLengthWithoutColors);
    }
    // Writing helpers
    newline() {
        this._writeToUniqueStream('\n');
        return this;
    }
    write(text) {
        if (this[wordWrapEnabled])
            text = this.wordWrap(text, this[indent], this.viewportWidth);
        else
            text = this.indentString(text, this[indent]);
        this._writeToUniqueStream(text);
        return this;
    }
    useWordWrap(use) {
        this[wordWrapEnabled] = use;
        return this;
    }
    setIndent(val) {
        this[indent] = val;
        return this;
    }
    _writeToUniqueStream(text) {
        if (!this.streamController || this.streamController.ensureUniqueStream(this[stream], this))
            this[stream].write(text);
    }
    // Abstract methods implemented in plugin
    async reportTaskStart( /* startTime, userAgents, testCount, testStructure, taskProperties */) {
        throw new Error('Not implemented');
    }
    async reportFixtureStart( /* name, path */) {
        throw new Error('Not implemented');
    }
    // NOTE: It's an optional method
    // async reportTestStart (/* name, testMeta */) {
    //     throw new Error('Not implemented');
    // }
    async reportTestDone( /* name, testRunInfo */) {
        throw new Error('Not implemented');
    }
    async reportTaskDone( /* endTime, passed, warnings */) {
        throw new Error('Not implemented');
    }
}
exports.default = ReporterPluginHost;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLWhvc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmVwb3J0ZXIvcGx1Z2luLWhvc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsa0VBQXlDO0FBQ3pDLG1DQUlnQjtBQUVoQiwyRUFBNEM7QUFDNUMsMERBQTJCO0FBQzNCLDRDQUE0RDtBQUM1RCxxRkFBMkQ7QUFDM0QsaURBQW1EO0FBRW5ELCtDQUErQztBQUMvQyw0Q0FBNEM7QUFDNUMsMENBQTBDO0FBRTFDLGlCQUFpQjtBQUNqQixNQUFNLE1BQU0sR0FBWSxNQUFNLEVBQUUsQ0FBQztBQUNqQyxNQUFNLGVBQWUsR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUNqQyxNQUFNLE1BQU0sR0FBWSxNQUFNLEVBQUUsQ0FBQztBQUNqQyxNQUFNLGNBQWMsR0FBSSxNQUFNLEVBQUUsQ0FBQztBQUVqQyxNQUFxQixrQkFBa0I7SUFDbkMsWUFBYSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUk7UUFDaEMsSUFBSSxDQUFDLElBQUksR0FBZSxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztRQUU3QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVksU0FBUyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDcEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQVksQ0FBQyxDQUFDO1FBRTFCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxPQUFPLENBQUMsTUFBTSxJQUFJLGVBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBRXZGLElBQUksQ0FBQyxLQUFLLEdBQVcsSUFBSSxlQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFD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aW5kZW50U3RyaW5nIGZyb20gJ2luZGVudC1zdHJpbmcnO1xuaW1wb3J0IHtcbiAgICBpZGVudGl0eSxcbiAgICBlc2NhcGUgYXMgZXNjYXBlSHRtbCxcbiAgICBhc3NpZ25JblxufSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgbW9tZW50IGZyb20gJy4uL3V0aWxzL21vbWVudC1sb2FkZXInO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyB3b3JkV3JhcCwgcmVtb3ZlVFRZQ29sb3JzIH0gZnJvbSAnLi4vdXRpbHMvc3RyaW5nJztcbmltcG9ydCBnZXRWaWV3cG9ydFdpZHRoIGZyb20gJy4uL3V0aWxzL2dldC12aWV3cG9ydC13aWR0aCc7XG5pbXBvcnQgeyBESUZGX0NPTE9SUyB9IGZyb20gJy4uL3V0aWxzL2RpZmYvY29sb3JzJztcblxuLy8gTk9URTogd2Ugc2hvdWxkIG5vdCBleHBvc2UgaW50ZXJuYWwgc3RhdGUgdG9cbi8vIHRoZSBwbHVnaW4sIHRvIGF2b2lkIGFjY2lkZW50YWwgcmV3cml0ZXMuXG4vLyBUaGVyZWZvcmUgd2UgdXNlIHN5bWJvbHMgdG8gc3RvcmUgdGhlbS5cblxuLypnbG9iYWwgU3ltYm9sKi9cbmNvbnN0IHN0cmVhbSAgICAgICAgICA9IFN5bWJvbCgpO1xuY29uc3Qgd29yZFdyYXBFbmFibGVkID0gU3ltYm9sKCk7XG5jb25zdCBpbmRlbnQgICAgICAgICAgPSBTeW1ib2woKTtcbmNvbnN0IGVycm9yRGVjb3JhdG9yICA9IFN5bWJvbCgpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXBvcnRlclBsdWdpbkhvc3Qge1xuICAgIGNvbnN0cnVjdG9yIChwbHVnaW4sIG91dFN0cmVhbSwgbmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgICAgICAgICAgICAgPSBuYW1lO1xuICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXIgPSBudWxsO1xuXG4gICAgICAgIHRoaXNbc3RyZWFtXSAgICAgICAgICA9IG91dFN0cmVhbSB8fCBwcm9jZXNzLnN0ZG91dDtcbiAgICAgICAgdGhpc1t3b3JkV3JhcEVuYWJsZWRdID0gZmFsc2U7XG4gICAgICAgIHRoaXNbaW5kZW50XSAgICAgICAgICA9IDA7XG5cbiAgICAgICAgY29uc3QgdXNlQ29sb3JzID0gdGhpc1tzdHJlYW1dID09PSBwcm9jZXNzLnN0ZG91dCAmJiBjaGFsay5lbmFibGVkICYmICFwbHVnaW4ubm9Db2xvcnM7XG5cbiAgICAgICAgdGhpcy5jaGFsayAgICAgICAgID0gbmV3IGNoYWxrLmNvbnN0cnVjdG9yKHsgZW5hYmxlZDogdXNlQ29sb3JzIH0pO1xuICAgICAgICB0aGlzLm1vbWVudCAgICAgICAgPSBtb21lbnQ7XG4gICAgICAgIHRoaXMudmlld3BvcnRXaWR0aCA9IGdldFZpZXdwb3J0V2lkdGgodGhpc1tzdHJlYW1dKTtcblxuICAgICAgICB0aGlzLnN5bWJvbHMgPSBPUy53aW4gP1xuICAgICAgICAgICAgeyBvazogJ+KImicsIGVycjogJ8OXJyB9IDpcbiAgICAgICAgICAgIHsgb2s6ICfinJMnLCBlcnI6ICfinJYnIH07XG5cbiAgICAgICAgYXNzaWduSW4odGhpcywgcGx1Z2luKTtcblxuICAgICAgICB0aGlzW2Vycm9yRGVjb3JhdG9yXSA9IHRoaXMuY3JlYXRlRXJyb3JEZWNvcmF0b3IoKTtcbiAgICB9XG5cbiAgICAvLyBFcnJvciBkZWNvcmF0b3JcbiAgICBjcmVhdGVFcnJvckRlY29yYXRvciAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnc3BhbiB1c2VyLWFnZW50Jzogc3RyID0+IHRoaXMuY2hhbGsuZ3JleShzdHIpLFxuXG4gICAgICAgICAgICAnc3BhbiBzdWJ0aXRsZSc6IHN0ciA9PiBgLSAke3RoaXMuY2hhbGsuYm9sZC5yZWQoc3RyKX0gLWAsXG4gICAgICAgICAgICAnZGl2IG1lc3NhZ2UnOiAgIHN0ciA9PiB0aGlzLmNoYWxrLmJvbGQucmVkKHN0ciksXG5cbiAgICAgICAgICAgICdkaXYgc2NyZWVuc2hvdC1pbmZvJzogaWRlbnRpdHksXG4gICAgICAgICAgICAnYSBzY3JlZW5zaG90LXBhdGgnOiAgIHN0ciA9PiB0aGlzLmNoYWxrLmdyZXkudW5kZXJsaW5lKHN0ciksXG5cbiAgICAgICAgICAgICdjb2RlJzogaWRlbnRpdHksXG5cbiAgICAgICAgICAgICdzcGFuIHN5bnRheC1zdHJpbmcnOiAgICAgc3RyID0+IHRoaXMuY2hhbGsuZ3JlZW4oc3RyKSxcbiAgICAgICAgICAgICdzcGFuIHN5bnRheC1wdW5jdHVhdG9yJzogc3RyID0+IHRoaXMuY2hhbGsuZ3JleShzdHIpLFxuICAgICAgICAgICAgJ3NwYW4gc3ludGF4LWtleXdvcmQnOiAgICBzdHIgPT4gdGhpcy5jaGFsay5jeWFuKHN0ciksXG4gICAgICAgICAgICAnc3BhbiBzeW50YXgtbnVtYmVyJzogICAgIHN0ciA9PiB0aGlzLmNoYWxrLm1hZ2VudGEoc3RyKSxcbiAgICAgICAgICAgICdzcGFuIHN5bnRheC1yZWdleCc6ICAgICAgc3RyID0+IHRoaXMuY2hhbGsubWFnZW50YShzdHIpLFxuICAgICAgICAgICAgJ3NwYW4gc3ludGF4LWNvbW1lbnQnOiAgICBzdHIgPT4gdGhpcy5jaGFsay5ncmV5LmJvbGQoc3RyKSxcbiAgICAgICAgICAgICdzcGFuIHN5bnRheC1pbnZhbGlkJzogICAgc3RyID0+IHRoaXMuY2hhbGsuaW52ZXJzZShzdHIpLFxuXG4gICAgICAgICAgICBbYHNwYW4gJHtESUZGX0NPTE9SUy5ESUZGX05PVF9NT0RJRklFRH1gXTogc3RyID0+IHRoaXMuY2hhbGsuZ3JheShzdHIpLFxuICAgICAgICAgICAgW2BzcGFuICR7RElGRl9DT0xPUlMuRElGRl9BRERFRH1gXTogICAgICAgIHN0ciA9PiB0aGlzLmNoYWxrLmdyZWVuKHN0ciksXG4gICAgICAgICAgICBbYHNwYW4gJHtESUZGX0NPTE9SUy5ESUZGX1JFTU9WRUR9YF06ICAgICAgc3RyID0+IHRoaXMuY2hhbGsucmVkKHN0ciksXG5cbiAgICAgICAgICAgICdkaXYgY29kZS1mcmFtZSc6ICAgICAgICAgaWRlbnRpdHksXG4gICAgICAgICAgICAnZGl2IGNvZGUtbGluZSc6ICAgICAgICAgIHN0ciA9PiBzdHIgKyAnXFxuJyxcbiAgICAgICAgICAgICdkaXYgY29kZS1saW5lLWxhc3QnOiAgICAgaWRlbnRpdHksXG4gICAgICAgICAgICAnZGl2IGNvZGUtbGluZS1udW0nOiAgICAgIHN0ciA9PiBgICAgJHtzdHJ9IHxgLFxuICAgICAgICAgICAgJ2RpdiBjb2RlLWxpbmUtbnVtLWJhc2UnOiBzdHIgPT4gdGhpcy5jaGFsay5iZ1JlZChgID4gJHtzdHJ9IGApICsgJ3wnLFxuICAgICAgICAgICAgJ2RpdiBjb2RlLWxpbmUtc3JjJzogICAgICBpZGVudGl0eSxcblxuICAgICAgICAgICAgJ2RpdiBzdGFjayc6ICAgICAgICAgICAgICAgc3RyID0+ICdcXG5cXG4nICsgc3RyLFxuICAgICAgICAgICAgJ2RpdiBzdGFjay1saW5lJzogICAgICAgICAgc3RyID0+IHN0ciArICdcXG4nLFxuICAgICAgICAgICAgJ2RpdiBzdGFjay1saW5lLWxhc3QnOiAgICAgaWRlbnRpdHksXG4gICAgICAgICAgICAnZGl2IHN0YWNrLWxpbmUtbmFtZSc6ICAgICBzdHIgPT4gYCAgIGF0ICR7dGhpcy5jaGFsay5ib2xkKHN0cil9YCxcbiAgICAgICAgICAgICdkaXYgc3RhY2stbGluZS1sb2NhdGlvbic6IHN0ciA9PiBgICgke3RoaXMuY2hhbGsuZ3JleS51bmRlcmxpbmUoc3RyKX0pYCxcblxuICAgICAgICAgICAgJ3N0cm9uZyc6IHN0ciA9PiB0aGlzLmNoYWxrLmJvbGQoc3RyKSxcbiAgICAgICAgICAgICdhJzogICAgICBzdHIgPT4gYFwiJHt0aGlzLmNoYWxrLnVuZGVybGluZShzdHIpfVwiYFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFN0cmluZyBoZWxwZXJzXG4gICAgaW5kZW50U3RyaW5nIChzdHIsIGluZGVudFZhbCkge1xuICAgICAgICByZXR1cm4gaW5kZW50U3RyaW5nKHN0ciwgJyAnLCBpbmRlbnRWYWwpO1xuICAgIH1cblxuICAgIHdvcmRXcmFwIChzdHIsIGluZGVudFZhbCwgd2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHdvcmRXcmFwKHN0ciwgaW5kZW50VmFsLCB3aWR0aCk7XG4gICAgfVxuXG4gICAgZXNjYXBlSHRtbCAoc3RyKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGVIdG1sKHN0cik7XG4gICAgfVxuXG4gICAgZm9ybWF0RXJyb3IgKGVyciwgcHJlZml4ID0gJycpIHtcbiAgICAgICAgY29uc3QgcHJlZml4TGVuZ3RoV2l0aG91dENvbG9ycyA9IHJlbW92ZVRUWUNvbG9ycyhwcmVmaXgpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbWF4TXNnTGVuZ3RoICAgICAgICAgICAgICA9IHRoaXMudmlld3BvcnRXaWR0aCAtIHRoaXNbaW5kZW50XSAtIHByZWZpeExlbmd0aFdpdGhvdXRDb2xvcnM7XG4gICAgICAgIGxldCBtc2cgICAgICAgICAgICAgICAgICAgICAgICAgPSBlcnIuZm9ybWF0TWVzc2FnZSh0aGlzW2Vycm9yRGVjb3JhdG9yXSwgbWF4TXNnTGVuZ3RoKTtcblxuICAgICAgICBpZiAodGhpc1t3b3JkV3JhcEVuYWJsZWRdKVxuICAgICAgICAgICAgbXNnID0gdGhpcy53b3JkV3JhcChtc2csIHByZWZpeExlbmd0aFdpdGhvdXRDb2xvcnMsIG1heE1zZ0xlbmd0aCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG1zZyA9IHRoaXMuaW5kZW50U3RyaW5nKG1zZywgcHJlZml4TGVuZ3RoV2l0aG91dENvbG9ycyk7XG5cbiAgICAgICAgcmV0dXJuIHByZWZpeCArIG1zZy5zdWJzdHIocHJlZml4TGVuZ3RoV2l0aG91dENvbG9ycyk7XG4gICAgfVxuXG5cbiAgICAvLyBXcml0aW5nIGhlbHBlcnNcbiAgICBuZXdsaW5lICgpIHtcbiAgICAgICAgdGhpcy5fd3JpdGVUb1VuaXF1ZVN0cmVhbSgnXFxuJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgd3JpdGUgKHRleHQpIHtcbiAgICAgICAgaWYgKHRoaXNbd29yZFdyYXBFbmFibGVkXSlcbiAgICAgICAgICAgIHRleHQgPSB0aGlzLndvcmRXcmFwKHRleHQsIHRoaXNbaW5kZW50XSwgdGhpcy52aWV3cG9ydFdpZHRoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGV4dCA9IHRoaXMuaW5kZW50U3RyaW5nKHRleHQsIHRoaXNbaW5kZW50XSk7XG5cbiAgICAgICAgdGhpcy5fd3JpdGVUb1VuaXF1ZVN0cmVhbSh0ZXh0KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB1c2VXb3JkV3JhcCAodXNlKSB7XG4gICAgICAgIHRoaXNbd29yZFdyYXBFbmFibGVkXSA9IHVzZTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzZXRJbmRlbnQgKHZhbCkge1xuICAgICAgICB0aGlzW2luZGVudF0gPSB2YWw7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgX3dyaXRlVG9VbmlxdWVTdHJlYW0gKHRleHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0cmVhbUNvbnRyb2xsZXIgfHwgdGhpcy5zdHJlYW1Db250cm9sbGVyLmVuc3VyZVVuaXF1ZVN0cmVhbSh0aGlzW3N0cmVhbV0sIHRoaXMpKVxuICAgICAgICAgICAgdGhpc1tzdHJlYW1dLndyaXRlKHRleHQpO1xuICAgIH1cblxuXG4gICAgLy8gQWJzdHJhY3QgbWV0aG9kcyBpbXBsZW1lbnRlZCBpbiBwbHVnaW5cbiAgICBhc3luYyByZXBvcnRUYXNrU3RhcnQgKC8qIHN0YXJ0VGltZSwgdXNlckFnZW50cywgdGVzdENvdW50LCB0ZXN0U3RydWN0dXJlLCB0YXNrUHJvcGVydGllcyAqLykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlcG9ydEZpeHR1cmVTdGFydCAoLyogbmFtZSwgcGF0aCAqLykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cblxuICAgIC8vIE5PVEU6IEl0J3MgYW4gb3B0aW9uYWwgbWV0aG9kXG4gICAgLy8gYXN5bmMgcmVwb3J0VGVzdFN0YXJ0ICgvKiBuYW1lLCB0ZXN0TWV0YSAqLykge1xuICAgIC8vICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIC8vIH1cblxuICAgIGFzeW5jIHJlcG9ydFRlc3REb25lICgvKiBuYW1lLCB0ZXN0UnVuSW5mbyAqLykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlcG9ydFRhc2tEb25lICgvKiBlbmRUaW1lLCBwYXNzZWQsIHdhcm5pbmdzICovKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxufVxuIl19