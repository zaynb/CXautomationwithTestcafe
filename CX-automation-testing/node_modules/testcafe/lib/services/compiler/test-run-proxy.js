"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_run_tracker_1 = __importDefault(require("../../api/test-run-tracker"));
const prerender_callsite_1 = __importDefault(require("../../utils/prerender-callsite"));
const test_controller_1 = __importDefault(require("../../api/test-controller"));
const observed_callsites_storage_1 = __importDefault(require("../../test-run/observed-callsites-storage"));
const warning_log_1 = __importDefault(require("../../notifications/warning-log"));
class TestRunMock {
    constructor(dispatcher, id, fixtureCtx) {
        this.dispatcher = dispatcher;
        this.id = id;
        this.ctx = Object.create(null);
        this.fixtureCtx = fixtureCtx;
        // TODO: Synchronize these properties with their real counterparts in the main process.
        // Postponed until (GH-3244). See details in (GH-5250).
        this.controller = new test_controller_1.default(this);
        this.observedCallsites = new observed_callsites_storage_1.default();
        this.warningLog = new warning_log_1.default();
        test_run_tracker_1.default.activeTestRuns[id] = this;
    }
    async executeAction(apiMethodName, command, callsite) {
        if (callsite)
            callsite = prerender_callsite_1.default(callsite);
        return await this.dispatcher.executeAction({ apiMethodName, command, callsite, id: this.id });
    }
}
exports.default = TestRunMock;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW4tcHJveHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmljZXMvY29tcGlsZXIvdGVzdC1ydW4tcHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrRkFBd0Q7QUFDeEQsd0ZBQStEO0FBRy9ELGdGQUF1RDtBQUN2RCwyR0FBaUY7QUFDakYsa0ZBQXlEO0FBR3pELE1BQU0sV0FBVztJQVViLFlBQW9CLFVBQXFDLEVBQUUsRUFBVSxFQUFFLFVBQW1CO1FBQ3RGLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBRTdCLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBRWIsSUFBSSxDQUFDLEdBQUcsR0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBRTdCLHVGQUF1RjtRQUN2Rix1REFBdUQ7UUFDdkQsSUFBSSxDQUFDLFVBQVUsR0FBVSxJQUFJLHlCQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksb0NBQXdCLEVBQUUsQ0FBQztRQUN4RCxJQUFJLENBQUMsVUFBVSxHQUFVLElBQUkscUJBQVUsRUFBRSxDQUFDO1FBRTFDLDBCQUFjLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUM3QyxDQUFDO0lBRU0sS0FBSyxDQUFDLGFBQWEsQ0FBRSxhQUFxQixFQUFFLE9BQWdCLEVBQUUsUUFBaUI7UUFDbEYsSUFBSSxRQUFRO1lBQ1IsUUFBUSxHQUFHLDRCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTNDLE9BQU8sTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRyxDQUFDO0NBQ0o7QUFFRCxrQkFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdFJ1blRyYWNrZXIgZnJvbSAnLi4vLi4vYXBpL3Rlc3QtcnVuLXRyYWNrZXInO1xuaW1wb3J0IHByZXJlbmRlckNhbGxzaXRlIGZyb20gJy4uLy4uL3V0aWxzL3ByZXJlbmRlci1jYWxsc2l0ZSc7XG5cbmltcG9ydCB7IFRlc3RSdW5EaXNwYXRjaGVyUHJvdG9jb2wgfSBmcm9tICcuL3Byb3RvY29sJztcbmltcG9ydCBUZXN0Q29udHJvbGxlciBmcm9tICcuLi8uLi9hcGkvdGVzdC1jb250cm9sbGVyJztcbmltcG9ydCBPYnNlcnZlZENhbGxzaXRlc1N0b3JhZ2UgZnJvbSAnLi4vLi4vdGVzdC1ydW4vb2JzZXJ2ZWQtY2FsbHNpdGVzLXN0b3JhZ2UnO1xuaW1wb3J0IFdhcm5pbmdMb2cgZnJvbSAnLi4vLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLWxvZyc7XG5cblxuY2xhc3MgVGVzdFJ1bk1vY2sge1xuICAgIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nO1xuICAgIHB1YmxpYyByZWFkb25seSBjb250cm9sbGVyOiBUZXN0Q29udHJvbGxlcjtcbiAgICBwdWJsaWMgcmVhZG9ubHkgb2JzZXJ2ZWRDYWxsc2l0ZXM6IE9ic2VydmVkQ2FsbHNpdGVzU3RvcmFnZTtcbiAgICBwdWJsaWMgcmVhZG9ubHkgd2FybmluZ0xvZzogV2FybmluZ0xvZztcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGlzcGF0Y2hlcjogVGVzdFJ1bkRpc3BhdGNoZXJQcm90b2NvbDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpeHR1cmVDdHg6IHVua25vd247XG4gICAgcHJpdmF0ZSByZWFkb25seSBjdHg6IHVua25vd247XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGRpc3BhdGNoZXI6IFRlc3RSdW5EaXNwYXRjaGVyUHJvdG9jb2wsIGlkOiBzdHJpbmcsIGZpeHR1cmVDdHg6IHVua25vd24pIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyID0gZGlzcGF0Y2hlcjtcblxuICAgICAgICB0aGlzLmlkID0gaWQ7XG5cbiAgICAgICAgdGhpcy5jdHggICAgICAgID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5maXh0dXJlQ3R4ID0gZml4dHVyZUN0eDtcblxuICAgICAgICAvLyBUT0RPOiBTeW5jaHJvbml6ZSB0aGVzZSBwcm9wZXJ0aWVzIHdpdGggdGhlaXIgcmVhbCBjb3VudGVycGFydHMgaW4gdGhlIG1haW4gcHJvY2Vzcy5cbiAgICAgICAgLy8gUG9zdHBvbmVkIHVudGlsIChHSC0zMjQ0KS4gU2VlIGRldGFpbHMgaW4gKEdILTUyNTApLlxuICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSAgICAgICAgbmV3IFRlc3RDb250cm9sbGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm9ic2VydmVkQ2FsbHNpdGVzID0gbmV3IE9ic2VydmVkQ2FsbHNpdGVzU3RvcmFnZSgpO1xuICAgICAgICB0aGlzLndhcm5pbmdMb2cgPSAgICAgICAgbmV3IFdhcm5pbmdMb2coKTtcblxuICAgICAgICB0ZXN0UnVuVHJhY2tlci5hY3RpdmVUZXN0UnVuc1tpZF0gPSB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBleGVjdXRlQWN0aW9uIChhcGlNZXRob2ROYW1lOiBzdHJpbmcsIGNvbW1hbmQ6IHVua25vd24sIGNhbGxzaXRlOiB1bmtub3duKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICAgIGlmIChjYWxsc2l0ZSlcbiAgICAgICAgICAgIGNhbGxzaXRlID0gcHJlcmVuZGVyQ2FsbHNpdGUoY2FsbHNpdGUpO1xuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRpc3BhdGNoZXIuZXhlY3V0ZUFjdGlvbih7IGFwaU1ldGhvZE5hbWUsIGNvbW1hbmQsIGNhbGxzaXRlLCBpZDogdGhpcy5pZCB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRlc3RSdW5Nb2NrO1xuXG5cbiJdfQ==