"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const compiler_1 = __importDefault(require("../../compiler"));
const test_run_proxy_1 = __importDefault(require("./test-run-proxy"));
const test_structure_1 = require("./test-structure");
const io_1 = require("./io");
const proxy_1 = require("../utils/ipc/proxy");
const transport_1 = require("../utils/ipc/transport");
const source_map_support_1 = __importDefault(require("source-map-support"));
const protocol_1 = require("./protocol");
source_map_support_1.default.install({
    hookRequire: true,
    handleUncaughtExceptions: false,
    environment: 'node'
});
class CompilerService {
    constructor() {
        const input = fs_1.default.createReadStream('', { fd: io_1.SERVICE_INPUT_FD });
        const output = fs_1.default.createWriteStream('', { fd: io_1.SERVICE_OUTPUT_FD });
        this.proxy = new proxy_1.IPCProxy(new transport_1.ServiceTransport(input, output, io_1.SERVICE_SYNC_FD));
        this.state = {
            testRuns: {},
            fixtureCtxs: {},
            units: {}
        };
        this._setupRoutes();
        this.ready();
    }
    _getFixtureCtx({ id }) {
        const unit = this.state.units[id];
        const fixtureId = test_structure_1.isTest(unit) ? unit.fixture.id : unit.id;
        if (!this.state.fixtureCtxs[fixtureId])
            this.state.fixtureCtxs[fixtureId] = Object.create(null);
        return this.state.fixtureCtxs[fixtureId];
    }
    _getContext(args) {
        const { testRunId } = args;
        const fixtureCtx = this._getFixtureCtx(args);
        if (!testRunId)
            return fixtureCtx;
        if (!this.state.testRuns[testRunId])
            this.state.testRuns[testRunId] = new test_run_proxy_1.default(this, testRunId, fixtureCtx);
        return this.state.testRuns[testRunId];
    }
    _setupRoutes() {
        this.proxy.register(this.getTests, this);
        this.proxy.register(this.runTest, this);
        this.proxy.register(this.cleanUp, this);
    }
    _getFunction(unit, functionName) {
        if (test_structure_1.isTest(unit) && protocol_1.isTestFunctionProperty(functionName))
            return unit[functionName];
        if (test_structure_1.isFixture(unit) && protocol_1.isFixtureFunctionProperty(functionName))
            return unit[functionName];
        throw new Error();
    }
    async ready() {
        this.proxy.call(this.ready);
    }
    async cleanUp() {
        await compiler_1.default.cleanUp();
    }
    async getTests({ sourceList, compilerOptions }) {
        const compiler = new compiler_1.default(sourceList, compilerOptions);
        const tests = await compiler.getTests();
        const units = test_structure_1.flatten(tests);
        Object.assign(this.state.units, units);
        return test_structure_1.serialize(units);
    }
    async runTest(args) {
        const { id, functionName } = args;
        const unit = this.state.units[id];
        const context = this._getContext(args);
        const functionObject = this._getFunction(unit, functionName);
        if (!functionObject)
            throw new Error();
        return await functionObject(context);
    }
    async executeAction({ id, apiMethodName, command, callsite }) {
        return this.proxy.call(this.executeAction, { id, apiMethodName, command, callsite });
    }
}
exports.default = new CompilerService();
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9jb21waWxlci9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLDhEQUFzQztBQUN0QyxzRUFBNEM7QUFFNUMscURBTzBCO0FBRTFCLDZCQUljO0FBRWQsOENBQThDO0FBQzlDLHNEQUEwRDtBQUMxRCw0RUFBa0Q7QUFFbEQseUNBS29CO0FBSXBCLDRCQUFnQixDQUFDLE9BQU8sQ0FBQztJQUNyQixXQUFXLEVBQWUsSUFBSTtJQUM5Qix3QkFBd0IsRUFBRSxLQUFLO0lBQy9CLFdBQVcsRUFBZSxNQUFNO0NBQ25DLENBQUMsQ0FBQztBQVFILE1BQU0sZUFBZTtJQUlqQjtRQUNJLE1BQU0sS0FBSyxHQUFJLFlBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUscUJBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sTUFBTSxHQUFHLFlBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsc0JBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBRW5FLElBQUksQ0FBQyxLQUFLLEdBQU0sSUFBSSxnQkFBUSxDQUFDLElBQUksNEJBQWdCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxvQkFBZSxDQUFDLENBQUMsQ0FBQztRQUNuRixJQUFJLENBQUMsS0FBSyxHQUFNO1lBQ1osUUFBUSxFQUFLLEVBQUU7WUFDZixXQUFXLEVBQUUsRUFBRTtZQUNmLEtBQUssRUFBUSxFQUFFO1NBQ2xCLENBQUM7UUFFRixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFTyxjQUFjLENBQUUsRUFBRSxFQUFFLEVBQW9CO1FBQzVDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FB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QUM7UUFFbEMsTUFBTSxJQUFJLEdBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztRQUU3RCxJQUFJLENBQUMsY0FBYztZQUNmLE1BQU0sSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUV0QixPQUFPLE1BQU0sY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUFFLEVBQUUsRUFBRSxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUEyQjtRQUN6RixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7Q0FDSjtBQUVELGtCQUFlLElBQUksZUFBZSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IENvbXBpbGVyIGZyb20gJy4uLy4uL2NvbXBpbGVyJztcbmltcG9ydCBUZXN0UnVuUHJveHkgZnJvbSAnLi90ZXN0LXJ1bi1wcm94eSc7XG5cbmltcG9ydCB7XG4gICAgZmxhdHRlbiBhcyBmbGF0dGVuVGVzdFN0cnVjdHVyZSxcbiAgICBpc0ZpeHR1cmUsXG4gICAgaXNUZXN0LFxuICAgIHNlcmlhbGl6ZSBhcyBzZXJpYWxpemVUZXN0U3RydWN0dXJlLFxuICAgIFVuaXQsXG4gICAgVW5pdHNcbn0gZnJvbSAnLi90ZXN0LXN0cnVjdHVyZSc7XG5cbmltcG9ydCB7XG4gICAgU0VSVklDRV9JTlBVVF9GRCxcbiAgICBTRVJWSUNFX09VVFBVVF9GRCxcbiAgICBTRVJWSUNFX1NZTkNfRkRcbn0gZnJvbSAnLi9pbyc7XG5cbmltcG9ydCB7IElQQ1Byb3h5IH0gZnJvbSAnLi4vdXRpbHMvaXBjL3Byb3h5JztcbmltcG9ydCB7IFNlcnZpY2VUcmFuc3BvcnQgfSBmcm9tICcuLi91dGlscy9pcGMvdHJhbnNwb3J0JztcbmltcG9ydCBzb3VyY2VNYXBTdXBwb3J0IGZyb20gJ3NvdXJjZS1tYXAtc3VwcG9ydCc7XG5cbmltcG9ydCB7XG4gICAgQ29tcGlsZXJQcm90b2NvbCxcbiAgICBFeGVjdXRlQ29tbWFuZEFyZ3VtZW50cywgRnVuY3Rpb25Qcm9wZXJ0aWVzLCBpc0ZpeHR1cmVGdW5jdGlvblByb3BlcnR5LFxuICAgIGlzVGVzdEZ1bmN0aW9uUHJvcGVydHksXG4gICAgUnVuVGVzdEFyZ3VtZW50c1xufSBmcm9tICcuL3Byb3RvY29sJztcbmltcG9ydCB7IENvbXBpbGVyQXJndW1lbnRzIH0gZnJvbSAnLi4vLi4vY29tcGlsZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgRml4dHVyZSBmcm9tICcuLi8uLi9hcGkvc3RydWN0dXJlL2ZpeHR1cmUnO1xuXG5zb3VyY2VNYXBTdXBwb3J0Lmluc3RhbGwoe1xuICAgIGhvb2tSZXF1aXJlOiAgICAgICAgICAgICAgdHJ1ZSxcbiAgICBoYW5kbGVVbmNhdWdodEV4Y2VwdGlvbnM6IGZhbHNlLFxuICAgIGVudmlyb25tZW50OiAgICAgICAgICAgICAgJ25vZGUnXG59KTtcblxuaW50ZXJmYWNlIFNlcnZpY2VTdGF0ZSB7XG4gICAgdGVzdFJ1bnM6IHsgW2lkOiBzdHJpbmddOiBUZXN0UnVuUHJveHkgfTtcbiAgICBmaXh0dXJlQ3R4czogeyBbaWQ6IHN0cmluZ106IG9iamVjdCB9O1xuICAgIHVuaXRzOiBVbml0cztcbn1cblxuY2xhc3MgQ29tcGlsZXJTZXJ2aWNlIGltcGxlbWVudHMgQ29tcGlsZXJQcm90b2NvbCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm94eTogSVBDUHJveHk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGF0ZTogU2VydmljZVN0YXRlO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgY29uc3QgaW5wdXQgID0gZnMuY3JlYXRlUmVhZFN0cmVhbSgnJywgeyBmZDogU0VSVklDRV9JTlBVVF9GRCB9KTtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0oJycsIHsgZmQ6IFNFUlZJQ0VfT1VUUFVUX0ZEIH0pO1xuXG4gICAgICAgIHRoaXMucHJveHkgICAgPSBuZXcgSVBDUHJveHkobmV3IFNlcnZpY2VUcmFuc3BvcnQoaW5wdXQsIG91dHB1dCwgU0VSVklDRV9TWU5DX0ZEKSk7XG4gICAgICAgIHRoaXMuc3RhdGUgICAgPSB7XG4gICAgICAgICAgICB0ZXN0UnVuczogICAge30sXG4gICAgICAgICAgICBmaXh0dXJlQ3R4czoge30sXG4gICAgICAgICAgICB1bml0czogICAgICAge31cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9zZXR1cFJvdXRlcygpO1xuICAgICAgICB0aGlzLnJlYWR5KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZ2V0Rml4dHVyZUN0eCAoeyBpZCB9OiBSdW5UZXN0QXJndW1lbnRzKTogdW5rbm93biB7XG4gICAgICAgIGNvbnN0IHVuaXQgPSB0aGlzLnN0YXRlLnVuaXRzW2lkXTtcblxuICAgICAgICBjb25zdCBmaXh0dXJlSWQgPSBpc1Rlc3QodW5pdCkgPyB1bml0LmZpeHR1cmUuaWQgOiAodW5pdCBhcyBGaXh0dXJlKS5pZDtcblxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuZml4dHVyZUN0eHNbZml4dHVyZUlkXSlcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuZml4dHVyZUN0eHNbZml4dHVyZUlkXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZml4dHVyZUN0eHNbZml4dHVyZUlkXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRDb250ZXh0IChhcmdzOiBSdW5UZXN0QXJndW1lbnRzKTogdW5rbm93biB7XG4gICAgICAgIGNvbnN0IHsgdGVzdFJ1bklkIH0gPSBhcmdzO1xuICAgICAgICBjb25zdCBmaXh0dXJlQ3R4ICAgICAgICA9IHRoaXMuX2dldEZpeHR1cmVDdHgoYXJncyk7XG5cbiAgICAgICAgaWYgKCF0ZXN0UnVuSWQpXG4gICAgICAgICAgICByZXR1cm4gZml4dHVyZUN0eDtcblxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUudGVzdFJ1bnNbdGVzdFJ1bklkXSlcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudGVzdFJ1bnNbdGVzdFJ1bklkXSA9IG5ldyBUZXN0UnVuUHJveHkodGhpcywgdGVzdFJ1bklkLCBmaXh0dXJlQ3R4KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS50ZXN0UnVuc1t0ZXN0UnVuSWRdO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3NldHVwUm91dGVzICgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wcm94eS5yZWdpc3Rlcih0aGlzLmdldFRlc3RzLCB0aGlzKTtcbiAgICAgICAgdGhpcy5wcm94eS5yZWdpc3Rlcih0aGlzLnJ1blRlc3QsIHRoaXMpO1xuICAgICAgICB0aGlzLnByb3h5LnJlZ2lzdGVyKHRoaXMuY2xlYW5VcCwgdGhpcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZ2V0RnVuY3Rpb24gKHVuaXQ6IFVuaXQsIGZ1bmN0aW9uTmFtZTogRnVuY3Rpb25Qcm9wZXJ0aWVzKTogRnVuY3Rpb258bnVsbCB7XG4gICAgICAgIGlmIChpc1Rlc3QodW5pdCkgJiYgaXNUZXN0RnVuY3Rpb25Qcm9wZXJ0eShmdW5jdGlvbk5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuIHVuaXRbZnVuY3Rpb25OYW1lXTtcblxuICAgICAgICBpZiAoaXNGaXh0dXJlKHVuaXQpICYmIGlzRml4dHVyZUZ1bmN0aW9uUHJvcGVydHkoZnVuY3Rpb25OYW1lKSlcbiAgICAgICAgICAgIHJldHVybiB1bml0W2Z1bmN0aW9uTmFtZV07XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHJlYWR5ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5wcm94eS5jYWxsKHRoaXMucmVhZHkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBjbGVhblVwICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgQ29tcGlsZXIuY2xlYW5VcCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRUZXN0cyAoeyBzb3VyY2VMaXN0LCBjb21waWxlck9wdGlvbnMgfTogQ29tcGlsZXJBcmd1bWVudHMpOiBQcm9taXNlPFVuaXRzPiB7XG4gICAgICAgIGNvbnN0IGNvbXBpbGVyID0gbmV3IENvbXBpbGVyKHNvdXJjZUxpc3QsIGNvbXBpbGVyT3B0aW9ucyk7XG5cbiAgICAgICAgY29uc3QgdGVzdHMgPSBhd2FpdCBjb21waWxlci5nZXRUZXN0cygpO1xuICAgICAgICBjb25zdCB1bml0cyA9IGZsYXR0ZW5UZXN0U3RydWN0dXJlKHRlc3RzKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuc3RhdGUudW5pdHMsIHVuaXRzKTtcblxuICAgICAgICByZXR1cm4gc2VyaWFsaXplVGVzdFN0cnVjdHVyZSh1bml0cyk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHJ1blRlc3QgKGFyZ3M6IFJ1blRlc3RBcmd1bWVudHMpOiBQcm9taXNlPHVua25vd24+IHtcbiAgICAgICAgY29uc3QgeyBpZCwgZnVuY3Rpb25OYW1lIH0gPSBhcmdzO1xuXG4gICAgICAgIGNvbnN0IHVuaXQgICAgPSB0aGlzLnN0YXRlLnVuaXRzW2lkXTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuX2dldENvbnRleHQoYXJncyk7XG5cbiAgICAgICAgY29uc3QgZnVuY3Rpb25PYmplY3QgPSB0aGlzLl9nZXRGdW5jdGlvbih1bml0LCBmdW5jdGlvbk5hbWUpO1xuXG4gICAgICAgIGlmICghZnVuY3Rpb25PYmplY3QpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcblxuICAgICAgICByZXR1cm4gYXdhaXQgZnVuY3Rpb25PYmplY3QoY29udGV4dCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGV4ZWN1dGVBY3Rpb24gKHsgaWQsIGFwaU1ldGhvZE5hbWUsIGNvbW1hbmQsIGNhbGxzaXRlIH06IEV4ZWN1dGVDb21tYW5kQXJndW1lbnRzKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3h5LmNhbGwodGhpcy5leGVjdXRlQWN0aW9uLCB7IGlkLCBhcGlNZXRob2ROYW1lLCBjb21tYW5kLCBjYWxsc2l0ZSB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBDb21waWxlclNlcnZpY2UoKTtcbiJdfQ==