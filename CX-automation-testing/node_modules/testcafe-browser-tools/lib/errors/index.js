"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const CODES = __importStar(require("./codes"));
exports.CODES = CODES;
const TEMPLATES = __importStar(require("../templates"));
function getErrorCode(errorClass) {
    const code = Object
        .keys(CODES)
        .find(currentCode => exports.CLASSES[currentCode] === errorClass); // eslint-disable-line no-use-before-define
    return code || CODES.E000;
}
function getErrorInfo(errorClass) {
    const code = getErrorCode(errorClass);
    return {
        constructor: exports.CLASSES[code],
        message: exports.MESSAGES[code],
        code
    };
}
class BasicError extends Error {
    constructor(data = {}) {
        const { code, constructor, message } = getErrorInfo(new.target);
        super(message(data));
        this.name = constructor.name;
        this.data = data;
        this.code = code;
    }
}
class BrowserPathNotSetError extends BasicError {
}
exports.BrowserPathNotSetError = BrowserPathNotSetError;
class UnableToRunBrowsersError extends BasicError {
    constructor({ path }) {
        super({ path });
    }
}
exports.UnableToRunBrowsersError = UnableToRunBrowsersError;
class NativeBinaryHasFailedError extends BasicError {
    constructor({ binary, exitCode, output }) {
        super({ binary, exitCode, output });
    }
}
exports.NativeBinaryHasFailedError = NativeBinaryHasFailedError;
class PermissionError extends NativeBinaryHasFailedError {
}
class UnableToAccessAutomationAPIError extends PermissionError {
}
exports.UnableToAccessAutomationAPIError = UnableToAccessAutomationAPIError;
class UnableToAccessScreenRecordingAPIError extends PermissionError {
}
exports.UnableToAccessScreenRecordingAPIError = UnableToAccessScreenRecordingAPIError;
class UnableToOpenDisplayError extends NativeBinaryHasFailedError {
}
exports.UnableToOpenDisplayError = UnableToOpenDisplayError;
exports.MESSAGES = {
    [CODES.E000]: TEMPLATES.BASIC_ERROR_MESSAGE,
    [CODES.E001]: TEMPLATES.BROWSER_PATH_NOT_SET,
    [CODES.E002]: TEMPLATES.UNABLE_TO_RUN_BROWSERS,
    [CODES.E003]: TEMPLATES.NATIVE_BINARY_HAS_FAILED,
    [CODES.E004]: TEMPLATES.UNABLE_TO_ACCESS_AUTOMATION_API,
    [CODES.E005]: TEMPLATES.UNABLE_TO_ACCESS_SCREEN_RECORDING_API,
    [CODES.E006]: TEMPLATES.UNABLE_TO_OPEN_DISPLAY
};
exports.CLASSES = {
    [CODES.E000]: BasicError,
    [CODES.E001]: BrowserPathNotSetError,
    [CODES.E002]: UnableToRunBrowsersError,
    [CODES.E003]: NativeBinaryHasFailedError,
    [CODES.E004]: UnableToAccessAutomationAPIError,
    [CODES.E005]: UnableToAccessScreenRecordingAPIError,
    [CODES.E006]: UnableToOpenDisplayError
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3JzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLCtDQUFpQztBQXdGeEIsc0JBQUs7QUF2RmQsd0RBQTBDO0FBRzFDLFNBQVMsWUFBWSxDQUFFLFVBQVU7SUFDN0IsTUFBTSxJQUFJLEdBQUcsTUFBTTtTQUNkLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDWCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxlQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQywyQ0FBMkM7SUFFMUcsT0FBTyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQztBQUM5QixDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUUsVUFBVTtJQUM3QixNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFdEMsT0FBTztRQUNILFdBQVcsRUFBRSxlQUFPLENBQUMsSUFBSSxDQUFDO1FBQzFCLE9BQU8sRUFBTSxnQkFBUSxDQUFDLElBQUksQ0FBQztRQUUzQixJQUFJO0tBQ1AsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVcsU0FBUSxLQUFLO0lBQzFCLFlBQWEsSUFBSSxHQUFHLEVBQUU7UUFDbEIsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLEdBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVqRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFckIsSUFBSSxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7Q0FDSjtBQUVELE1BQWEsc0JBQXVCLFNBQVEsVUFBVTtDQUVyRDtBQUZELHdEQUVDO0FBRUQsTUFBYSx3QkFBeUIsU0FBUSxVQUFVO0lBQ3BELFlBQWEsRUFBRSxJQUFJLEVBQUU7UUFDakIsS0FBSyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwQixDQUFDO0NBQ0o7QUFKRCw0REFJQztBQUVELE1BQWEsMEJBQTJCLFNBQVEsVUFBVTtJQUN0RCxZQUFhLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7UUFDckMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDSjtBQUpELGdFQUlDO0FBRUQsTUFBTSxlQUFnQixTQUFRLDBCQUEwQjtDQUV2RDtBQUVELE1BQWEsZ0NBQWlDLFNBQVEsZUFBZTtDQUVwRTtBQUZELDRFQUVDO0FBRUQsTUFBYSxxQ0FBc0MsU0FBUSxlQUFlO0NBRXpFO0FBRkQsc0ZBRUM7QUFFRCxNQUFhLHdCQUF5QixTQUFRLDBCQUEwQjtDQUV2RTtBQUZELDREQUVDO0FBRVksUUFBQSxRQUFRLEdBQUc7SUFDcEIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxDQUFDLG1CQUFtQjtJQUMzQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsb0JBQW9CO0lBQzVDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxzQkFBc0I7SUFDOUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxDQUFDLHdCQUF3QjtJQUNoRCxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsK0JBQStCO0lBQ3ZELENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxxQ0FBcUM7SUFDN0QsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxDQUFDLHNCQUFzQjtDQUNqRCxDQUFDO0FBRVcsUUFBQSxPQUFPLEdBQUc7SUFDbkIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVTtJQUN4QixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxzQkFBc0I7SUFDcEMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsd0JBQXdCO0lBQ3RDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLDBCQUEwQjtJQUN4QyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxnQ0FBZ0M7SUFDOUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUscUNBQXFDO0lBQ25ELENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLHdCQUF3QjtDQUN6QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQ09ERVMgZnJvbSAnLi9jb2Rlcyc7XG5pbXBvcnQgKiBhcyBURU1QTEFURVMgZnJvbSAnLi4vdGVtcGxhdGVzJztcblxuXG5mdW5jdGlvbiBnZXRFcnJvckNvZGUgKGVycm9yQ2xhc3MpIHtcbiAgICBjb25zdCBjb2RlID0gT2JqZWN0XG4gICAgICAgIC5rZXlzKENPREVTKVxuICAgICAgICAuZmluZChjdXJyZW50Q29kZSA9PiBDTEFTU0VTW2N1cnJlbnRDb2RlXSA9PT0gZXJyb3JDbGFzcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcblxuICAgIHJldHVybiBjb2RlIHx8IENPREVTLkUwMDA7XG59XG5cbmZ1bmN0aW9uIGdldEVycm9ySW5mbyAoZXJyb3JDbGFzcykge1xuICAgIGNvbnN0IGNvZGUgPSBnZXRFcnJvckNvZGUoZXJyb3JDbGFzcyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjb25zdHJ1Y3RvcjogQ0xBU1NFU1tjb2RlXSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICBtZXNzYWdlOiAgICAgTUVTU0FHRVNbY29kZV0sIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcblxuICAgICAgICBjb2RlXG4gICAgfTtcbn1cblxuY2xhc3MgQmFzaWNFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAoZGF0YSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgY29kZSwgY29uc3RydWN0b3IsIG1lc3NhZ2UgfSAgPSBnZXRFcnJvckluZm8obmV3LnRhcmdldCk7XG5cbiAgICAgICAgc3VwZXIobWVzc2FnZShkYXRhKSk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCcm93c2VyUGF0aE5vdFNldEVycm9yIGV4dGVuZHMgQmFzaWNFcnJvciB7XG5cbn1cblxuZXhwb3J0IGNsYXNzIFVuYWJsZVRvUnVuQnJvd3NlcnNFcnJvciBleHRlbmRzIEJhc2ljRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yICh7IHBhdGggfSkge1xuICAgICAgICBzdXBlcih7IHBhdGggfSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTmF0aXZlQmluYXJ5SGFzRmFpbGVkRXJyb3IgZXh0ZW5kcyBCYXNpY0Vycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAoeyBiaW5hcnksIGV4aXRDb2RlLCBvdXRwdXQgfSkge1xuICAgICAgICBzdXBlcih7IGJpbmFyeSwgZXhpdENvZGUsIG91dHB1dCB9KTtcbiAgICB9XG59XG5cbmNsYXNzIFBlcm1pc3Npb25FcnJvciBleHRlbmRzIE5hdGl2ZUJpbmFyeUhhc0ZhaWxlZEVycm9yIHtcblxufVxuXG5leHBvcnQgY2xhc3MgVW5hYmxlVG9BY2Nlc3NBdXRvbWF0aW9uQVBJRXJyb3IgZXh0ZW5kcyBQZXJtaXNzaW9uRXJyb3Ige1xuXG59XG5cbmV4cG9ydCBjbGFzcyBVbmFibGVUb0FjY2Vzc1NjcmVlblJlY29yZGluZ0FQSUVycm9yIGV4dGVuZHMgUGVybWlzc2lvbkVycm9yIHtcblxufVxuXG5leHBvcnQgY2xhc3MgVW5hYmxlVG9PcGVuRGlzcGxheUVycm9yIGV4dGVuZHMgTmF0aXZlQmluYXJ5SGFzRmFpbGVkRXJyb3Ige1xuXG59XG5cbmV4cG9ydCBjb25zdCBNRVNTQUdFUyA9IHtcbiAgICBbQ09ERVMuRTAwMF06IFRFTVBMQVRFUy5CQVNJQ19FUlJPUl9NRVNTQUdFLFxuICAgIFtDT0RFUy5FMDAxXTogVEVNUExBVEVTLkJST1dTRVJfUEFUSF9OT1RfU0VULFxuICAgIFtDT0RFUy5FMDAyXTogVEVNUExBVEVTLlVOQUJMRV9UT19SVU5fQlJPV1NFUlMsXG4gICAgW0NPREVTLkUwMDNdOiBURU1QTEFURVMuTkFUSVZFX0JJTkFSWV9IQVNfRkFJTEVELFxuICAgIFtDT0RFUy5FMDA0XTogVEVNUExBVEVTLlVOQUJMRV9UT19BQ0NFU1NfQVVUT01BVElPTl9BUEksXG4gICAgW0NPREVTLkUwMDVdOiBURU1QTEFURVMuVU5BQkxFX1RPX0FDQ0VTU19TQ1JFRU5fUkVDT1JESU5HX0FQSSxcbiAgICBbQ09ERVMuRTAwNl06IFRFTVBMQVRFUy5VTkFCTEVfVE9fT1BFTl9ESVNQTEFZXG59O1xuXG5leHBvcnQgY29uc3QgQ0xBU1NFUyA9IHtcbiAgICBbQ09ERVMuRTAwMF06IEJhc2ljRXJyb3IsXG4gICAgW0NPREVTLkUwMDFdOiBCcm93c2VyUGF0aE5vdFNldEVycm9yLFxuICAgIFtDT0RFUy5FMDAyXTogVW5hYmxlVG9SdW5Ccm93c2Vyc0Vycm9yLFxuICAgIFtDT0RFUy5FMDAzXTogTmF0aXZlQmluYXJ5SGFzRmFpbGVkRXJyb3IsXG4gICAgW0NPREVTLkUwMDRdOiBVbmFibGVUb0FjY2Vzc0F1dG9tYXRpb25BUElFcnJvcixcbiAgICBbQ09ERVMuRTAwNV06IFVuYWJsZVRvQWNjZXNzU2NyZWVuUmVjb3JkaW5nQVBJRXJyb3IsXG4gICAgW0NPREVTLkUwMDZdOiBVbmFibGVUb09wZW5EaXNwbGF5RXJyb3Jcbn07XG5cblxuZXhwb3J0IHsgQ09ERVMgfTtcbiJdfQ==